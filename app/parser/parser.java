
//----------------------------------------------------
// The following code was generated by CUP v0.10i
// Fri Jun 04 15:43:24 EDT 1999
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Vector;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\003\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\010\000\002\004\010\000" +
    "\002\004\006\000\002\004\003\000\002\004\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\007" +
    "\000\002\004\010\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\006\000\002\004\005\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\006\003\000\002\006\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\006\000\002" +
    "\010\005\000\002\010\006\000\002\007\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\004" });

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\056\003\026\014\032\015\021\021\024\022" +
    "\004\023\011\024\014\025\017\026\025\027\013\030\022" +
    "\031\010\032\027\033\033\034\007\035\023\036\005\037" +
    "\015\040\006\041\020\044\031\045\030\001\002\000\004" +
    "\027\uffe4\001\002\000\014\012\044\017\040\021\037\042" +
    "\042\043\043\001\002\000\014\012\044\017\040\021\037" +
    "\042\042\043\043\001\002\000\004\043\035\001\002\000" +
    "\004\027\ufff7\001\002\000\004\027\uffe5\001\002\000\004" +
    "\027\140\001\002\000\056\002\ufffe\014\ufffe\015\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe\001\002" +
    "\000\010\017\125\021\124\043\126\001\002\000\004\043" +
    "\123\001\002\000\056\002\121\014\032\015\021\021\024" +
    "\022\004\023\011\024\014\025\017\026\025\027\120\030" +
    "\022\031\010\032\027\033\033\034\007\035\023\036\005" +
    "\037\015\040\006\041\020\044\031\045\030\001\002\000" +
    "\014\012\044\017\040\021\037\042\042\043\043\001\002" +
    "\000\014\012\044\017\040\021\037\042\042\043\043\001" +
    "\002\000\004\027\uffec\001\002\000\004\043\106\001\002" +
    "\000\004\027\uffea\001\002\000\004\043\102\001\002\000" +
    "\014\012\044\017\040\021\037\042\042\043\043\001\002" +
    "\000\056\002\ufffc\014\ufffc\015\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\044\ufffc\045\ufffc\001\002\000\014\012\044" +
    "\017\040\021\037\042\042\043\043\001\002\000\016\012" +
    "\044\017\040\021\037\027\ufff4\042\042\043\043\001\002" +
    "\000\014\012\044\017\040\021\037\042\042\043\043\001" +
    "\002\000\004\027\uffeb\001\002\000\004\043\035\001\002" +
    "\000\006\027\ufff3\043\036\001\002\000\006\027\uffe1\043" +
    "\uffe1\001\002\000\006\027\uffe0\043\uffe0\001\002\000\004" +
    "\043\066\001\002\000\014\012\044\017\040\021\037\042" +
    "\042\043\043\001\002\000\014\012\044\017\040\021\037" +
    "\042\042\043\043\001\002\000\034\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\012\uffdf\013\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\027\uffdf\042\uffdf\043\uffdf\001\002\000\034\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\012\uffde\013\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\027\uffde\042\uffde\043\uffde\001" +
    "\002\000\016\005\045\012\044\017\040\021\037\042\042" +
    "\043\043\001\002\000\016\005\045\012\044\017\040\021" +
    "\037\042\042\043\043\001\002\000\014\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\013\uffd9\001\002\000\014\004\052\005" +
    "\050\006\054\007\053\013\051\001\002\000\016\005\045" +
    "\012\044\017\040\021\037\042\042\043\043\001\002\000" +
    "\034\004\uffdd\005\uffdd\006\uffdd\007\uffdd\012\uffdd\013\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\027\uffdd\042\uffdd\043" +
    "\uffdd\001\002\000\016\005\045\012\044\017\040\021\037" +
    "\042\042\043\043\001\002\000\016\005\045\012\044\017" +
    "\040\021\037\042\042\043\043\001\002\000\016\005\045" +
    "\012\044\017\040\021\037\042\042\043\043\001\002\000" +
    "\014\004\uffd6\005\uffd6\006\uffd6\007\uffd6\013\uffd6\001\002" +
    "\000\014\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\001" +
    "\002\000\014\004\uffd8\005\uffd8\006\054\007\053\013\uffd8" +
    "\001\002\000\014\004\uffd7\005\uffd7\006\054\007\053\013" +
    "\uffd7\001\002\000\014\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\013\uffd4\001\002\000\004\027\ufff6\001\002\000\014\012" +
    "\044\017\040\021\037\042\042\043\043\001\002\000\004" +
    "\016\065\001\002\000\034\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\012\uffda\013\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\027\uffda\042\uffda\043\uffda\001\002\000\016\012\044\017" +
    "\040\020\071\021\037\042\042\043\043\001\002\000\020" +
    "\012\uffe3\017\uffe3\020\uffe3\021\uffe3\027\uffe3\042\uffe3\043" +
    "\uffe3\001\002\000\016\012\044\017\040\020\073\021\037" +
    "\042\042\043\043\001\002\000\034\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\012\uffdb\013\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\027\uffdb\042\uffdb\043\uffdb\001\002\000\020\012" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\027\uffe2\042\uffe2\043\uffe2" +
    "\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007\uffdc\012" +
    "\uffdc\013\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\027\uffdc" +
    "\042\uffdc\043\uffdc\001\002\000\016\012\044\017\040\021" +
    "\037\027\ufff5\042\042\043\043\001\002\000\014\012\044" +
    "\017\040\021\037\042\042\043\043\001\002\000\014\012" +
    "\044\017\040\021\037\042\042\043\043\001\002\000\014" +
    "\012\044\017\040\021\037\042\042\043\043\001\002\000" +
    "\004\027\uffef\001\002\000\004\027\ufff0\001\002\000\016" +
    "\012\044\017\040\020\104\021\037\042\042\043\043\001" +
    "\002\000\016\012\044\017\040\020\105\021\037\042\042" +
    "\043\043\001\002\000\004\027\uffe6\001\002\000\004\027" +
    "\uffe7\001\002\000\014\012\044\017\040\021\037\042\042" +
    "\043\043\001\002\000\014\012\044\017\040\021\037\042" +
    "\042\043\043\001\002\000\004\027\ufff8\001\002\000\014" +
    "\012\044\017\040\021\037\042\042\043\043\001\002\000" +
    "\014\012\044\017\040\021\037\042\042\043\043\001\002" +
    "\000\014\012\044\017\040\021\037\042\042\043\043\001" +
    "\002\000\014\012\044\017\040\021\037\042\042\043\043" +
    "\001\002\000\004\027\uffee\001\002\000\004\027\ufff1\001" +
    "\002\000\004\027\122\001\002\000\056\002\ufffd\014\ufffd" +
    "\015\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\001\002\000\004\002\000\001\002\000\056\002\uffff" +
    "\014\uffff\015\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\044" +
    "\uffff\045\uffff\001\002\000\004\027\uffe9\001\002\000\004" +
    "\043\134\001\002\000\014\012\044\017\040\021\037\042" +
    "\042\043\043\001\002\000\014\012\044\017\040\021\037" +
    "\042\042\043\043\001\002\000\004\027\ufffb\001\002\000" +
    "\014\012\044\017\040\021\037\042\042\043\043\001\002" +
    "\000\004\016\132\001\002\000\014\012\044\017\040\021" +
    "\037\042\042\043\043\001\002\000\004\027\ufff9\001\002" +
    "\000\014\012\044\017\040\021\037\042\042\043\043\001" +
    "\002\000\004\020\136\001\002\000\014\012\044\017\040" +
    "\021\037\042\042\043\043\001\002\000\004\027\ufffa\001" +
    "\002\000\056\002\001\014\001\015\001\021\001\022\001" +
    "\023\001\024\001\025\001\026\001\027\001\030\001\031" +
    "\001\032\001\033\001\034\001\035\001\036\001\037\001" +
    "\040\001\041\001\044\001\045\001\001\002\000\006\027" +
    "\ufff2\043\036\001\002\000\004\027\uffed\001\002\000\004" +
    "\027\uffe8\001\002" });

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\006\003\015\004\011\001\001\000\002\001" +
    "\001\000\004\010\142\001\001\000\004\010\141\001\001" +
    "\000\004\006\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\116\001\001\000\004\010" +
    "\115\001\001\000\004\010\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\100\001\001\000\002\001\001\000\004\010\074" +
    "\001\001\000\006\005\073\010\066\001\001\000\004\010" +
    "\040\001\001\000\002\001\001\000\004\006\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\062\001\001\000\004\010\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\046\010\045\001\001\000\006\007\060\010\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\057\010" +
    "\045\001\001\000\002\001\001\000\006\007\056\010\045" +
    "\001\001\000\006\007\055\010\045\001\001\000\006\007" +
    "\054\010\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\067\010\066\001\001\000" +
    "\002\001\001\000\004\010\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\071\001" +
    "\001\000\004\010\075\001\001\000\004\010\076\001\001" +
    "\000\004\010\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\102\010\066\001\001\000\004\010\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\106\001\001\000\004\010\107\001\001\000\002\001\001" +
    "\000\004\010\111\001\001\000\004\010\112\001\001\000" +
    "\004\010\113\001\001\000\004\010\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\127\001\001\000\004\010" +
    "\126\001\001\000\002\001\001\000\004\010\130\001\001" +
    "\000\002\001\001\000\004\010\132\001\001\000\002\001" +
    "\001\000\004\010\134\001\001\000\002\001\001\000\004" +
    "\010\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$parser$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	char ch;
	StringBuffer sb = new StringBuffer();
	//s = new String(DrawSpace.parseString);
	StringBufferInputStream strStream = new StringBufferInputStream(parseString);
	DataInputStream inStream = new DataInputStream(strStream);
	yyScan = new Yylex(inStream);
	action_obj.ph = this.ph;
	syntaxErrorHappened = false;
	if(cb!=null) yyScan.pushCodeBlock(cb);
	else yyScan.cleanTables();

    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	if(delay!=0) {
		try {thisThread.sleep(delay); }
		catch (Exception e) {}
	}
	return yyScan.tomScan(); 

    }

 
	public Yylex yyScan;
	public int delay=0;
	public int value = 0;
	Thread thisThread = Thread.currentThread( );
	String s;
	ParserHandler ph;
	public void setParserHandler(ParserHandler ph) {this.ph = ph;}
	public String outputString = new String();
	public boolean syntaxErrorHappened;
	public String firstError;
	public void syntax_error(Symbol cur_token) 
		throws DbnException {
		String output;
		
		output = new String("symbol " + cur_token.sym);
		if(cur_token.value != null) output = output.concat(", with Object " + cur_token.value);
		if(cur_token.left != -1) output = output.concat(", with left " + cur_token.left);
		if(cur_token.right != -1) output = output.concat(", with right " + cur_token.right);
		output = output.concat(".");
		if(!syntaxErrorHappened) {
			syntaxErrorHappened = true;
			firstError = new String(output);
			ph.syntaxError(output, cur_token.left, cur_token.right);
		}
	}
	String parseString=null;
	public void setParseString(String s) {
		parseString = new String(s);
	}
	public void quitOnNextSymbol() {
		yyScan.quitOnNextSymbol();
	}
	codeBlock cb=null;
	public void setCodeBlock(codeBlock cb) {
		this.cb = cb;
	}
	public int getValue() {
		return value;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public ParserHandler ph;
	public Vector names = new Vector();
	public Vector numbers = new Vector();
	public Vector emptyVector = new Vector();
	/* This is actionCode */

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= MINUS expr 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(0 - e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DIVIDE expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() / e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr TIMES expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() * e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr MINUS expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() - e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr PLUS expr 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e1.intValue() + e2.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= simple_expr 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Integer(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expr ::= LBRACKET simple_expr simple_expr RBRACKET 
            {
              Integer RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new Integer (ph.getDot(e1.intValue(), e2.intValue()));
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_expr ::= LBRACE NAME RBRACE 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(ph.hasConnector(n)) 
					RESULT = new Integer (ph.getConnector(n, emptyVector)); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					RESULT =  new Integer (myParser.yyScan.runFunction(n, emptyVector));				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_expr ::= LBRACE NAME simple_expr_list RBRACE 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				if(ph.hasConnector(n)) 
					RESULT = new Integer (ph.getConnector(n, numbers)); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					RESULT =  new Integer (myParser.yyScan.runFunction(n, numbers));				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expr ::= NAME 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				parser myParser = (parser)CUP$parser$parser;
				RESULT = new Integer(myParser.yyScan.getVariable(n)); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_expr ::= INTEGER 
            {
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // name_list ::= name_list NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 names.addElement(new String (n)); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*name_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // name_list ::= NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			names.addElement(new String(n)); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*name_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_expr_list ::= simple_expr_list simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 numbers.addElement(new Integer(e.intValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*simple_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_expr_list ::= simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 numbers.addElement(new Integer(e.intValue())); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*simple_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= RBLOCK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= LBLOCK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= LBRACE NAME RBRACE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(ph.hasConnector(n)) 
					ph.getConnector(n, emptyVector); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					myParser.yyScan.runFunction(n, emptyVector);				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= LBRACE NAME simple_expr_list RBRACE 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				if(ph.hasConnector(n)) 
					ph.getConnector(n, numbers); 
				else {
					parser myParser = (parser)CUP$parser$parser;
					myParser.yyScan.runFunction(n, numbers);				
				}
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= VALUE simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				 parser myParser = (parser)CUP$parser$parser;
				 myParser.value = e.intValue();
				 myParser.done_parsing();
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= LOAD NAME 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				String str = ph.doLoad(n);
				if(str != null) {
					parser myParser = (parser)CUP$parser$parser;
					myParser.yyScan.handleLoad(str);				
				}				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= ESCAPE 
            {
              Object RESULT = null;
		 
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doBreak();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= ALIAS 
            {
              Object RESULT = null;
		 ph.setAlias(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= ANTIALIAS 
            {
              Object RESULT = null;
		 ph.setAntialias(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= PAUSE simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ph.doPause(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= FIELD simple_expr simple_expr simple_expr simple_expr simple_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ph.doField(e1.intValue(), e2.intValue(), e3.intValue(), e4.intValue(), e5.intValue());
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= LINE simple_expr simple_expr simple_expr simple_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ph.drawLine(e1.intValue(), e2.intValue(), e3.intValue(), e4.intValue());
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PEN simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ph.setPen(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PAPER simple_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ph.setPaper(e.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= NUMBER name_list 
            {
              Object RESULT = null;
		
				//for(int i=0;i<names.size();i++) {
				//	System.out.println("Command ! ("+i+") = "+(String)names.elementAt(i));
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.saveFunction(names, ph);				
				names.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= COMMAND name_list 
            {
              Object RESULT = null;
		
				//for(int i=0;i<names.size();i++) {
				//	System.out.println("Command ! ("+i+") = "+(String)names.elementAt(i));
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.saveCommand(names, ph);				
				names.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= COMMANDNAME 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				//System.out.println("Command ["+c+"]");
				parser myParser = (parser)CUP$parser$parser;
				names.removeAllElements();				
				myParser.yyScan.runCommand(c, emptyVector);				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= COMMANDNAME simple_expr_list 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				//for(int i=0;i<numbers.size();i++) {
				//	System.out.println("Command ["+c+"] ("+i+") = "+((Integer)numbers.elementAt(i)).intValue());
				//}
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.runCommand(c, numbers);
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= QUESTION simple_expr simple_expr 
            {
              Object RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doConditional(q, e1.intValue(), e2.intValue(), ph);
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= FOREVER 
            {
              Object RESULT = null;
		
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doRepeat(true, "", 0, 0, ph);
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= REPEAT NAME simple_expr simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				/* do nothing*/
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.doRepeat(false, n, e1.intValue(), e2.intValue(), ph);
				/**/
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= SET LBRACKET simple_expr simple_expr RBRACKET simple_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ph.setDot(e1.intValue(), e2.intValue(), e3.intValue());
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= SET LBRACE NAME simple_expr RBRACE simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				ph.setConnector(n, e1.intValue(), e2.intValue());
				numbers.removeAllElements();				
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= SET NAME simple_expr 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				parser myParser = (parser)CUP$parser$parser;
				myParser.yyScan.setVariable(n, e.intValue()); 
			
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= error 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_list ::= statement_list RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= RETURN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement RETURN 
            {
              Object RESULT = null;
		
			ph.idle();
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement_list ::= statement RETURN 
            {
              Object RESULT = null;
		
			ph.idle();
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

